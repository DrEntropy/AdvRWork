decision.values = T)
fitted <- attributes(
predict(svmfit.opt, dat[train, ], decision.values = TRUE)
)$decision.values
rocplot(-fitted, dat[train, "y"], main = "Training Data")
svmfit.flex <- svm(y ~ ., data = dat[train, ],
kernel = "radial", gamma = 50, cost = 1,
decision.values = T)
fitted <- attributes(
predict(svmfit.flex, dat[train, ], decision.values = T)
)$decision.values
rocplot(-fitted, dat[train, "y"], add = T, col = "red")
fitted <- attributes(
predict(svmfit.opt, dat[-train, ], decision.values = T)
)$decision.values
rocplot(-fitted, dat[-train, "y"], main = "Test Data")
fitted <- attributes(
predict(svmfit.flex, dat[-train, ], decision.values = T)
)$decision.values
rocplot(-fitted, dat[-train, "y"], add = T, col = "red")
set.seed(1)
x <- rbind(x, matrix(rnorm(50 * 2), ncol = 2))
y <- c(y, rep(0, 50))
x[y == 0, 2] <- x[y == 0, 2] + 2
dat <- data.frame(x = x, y = as.factor(y))
par(mfrow = c(1, 1))
plot(x, col = (y + 1))
svmfit <- svm(y ~ ., data = dat, kernel = "radial",
cost = 10, gamma = 1)
plot(svmfit, dat)
library(ISLR2)
names(Khan)
dim(Khan$xtrain)
dim(Khan$xtest)
length(Khan$ytrain)
length(Khan$ytest)
table(Khan$ytrain)
table(Khan$ytest)
dat <- data.frame(
x = Khan$xtrain,
y = as.factor(Khan$ytrain)
)
out <- svm(y ~ ., data = dat, kernel = "linear",
cost = 10)
summary(out)
table(out$fitted, dat$y)
dat.te <- data.frame(
x = Khan$xtest,
y = as.factor(Khan$ytest))
pred.te <- predict(out, newdata = dat.te)
table(pred.te, dat.te$y)
View(dat)
View(dat.te)
Khan$ytest
svmfit.opt <- svm(y ~ ., data = dat[train, ],
kernel = "radial", gamma = 2, cost = 1,
decision.values = T)
fitted <- attributes(
predict(svmfit.opt, dat[train, ], decision.values = TRUE)
)$decision.values
View(fitted)
# Load packages
library(bayesrules)
library(rstanarm)
library(bayesplot)
library(tidyverse)
library(tidybayes)
library(broom.mixed)
data("hotel_bookings")
hotel_bookings %>%
select(is_canceled)  %>% summarize(fraction_cancelled = mean(is_canceled==1))
hotel_bookings <- hotel_bookings %>%
select(is_canceled,lead_time, previous_cancellations, is_repeated_guest, average_daily_rate )
hotel_bookings %>% summarise(across(where(is.numeric), mean))
hotel_bookings %>% summarise(across(where(is.numeric), max))
hotel_bookings %>% group_by(is_repeated_guest) %>%
summarize(cancel_rate = mean(is_canceled==1))
hotel_bookings %>%
mutate(lead_time_cut = cut(lead_time, breaks =10)) %>%
group_by(lead_time_cut) %>% summarize(cancel_rate = mean(is_canceled==1)) %>%
ggplot(aes(x= lead_time_cut, y= cancel_rate)) +
geom_point() +
theme(axis.text.x = element_text(angle=45, vjust =0.5))
hotel_bookings %>%
mutate(previous_cancel_cut = cut(previous_cancellations, breaks = c(-5,0,5,10,15,25,30))) %>%
group_by(previous_cancel_cut) %>% summarize(cancel_rate = mean(is_canceled==1)) %>%
ggplot(aes(x= previous_cancel_cut, y= cancel_rate)) +
geom_point() +
theme(axis.text.x = element_text(angle=45, vjust =0.5))
hotel_bookings %>%
mutate(daily_rate_cut = cut(average_daily_rate, breaks = seq(-50,400,50))) %>%
group_by(daily_rate_cut) %>% summarize(cancel_rate = mean(is_canceled==1)) %>%
ggplot(aes(x= daily_rate_cut, y= cancel_rate)) +
geom_point() +
theme(axis.text.x = element_text(angle=45, vjust =0.5))
hotel_bookings %>%
mutate(daily_rate_cut = cut(average_daily_rate, breaks = seq(-50,400,50))) %>%
group_by(daily_rate_cut) %>% count
cancel_model <- stan_glm(is_canceled ~ lead_time + previous_cancellations + is_repeated_guest + average_daily_rate,
data = hotel_bookings, family = binomial,
prior_intercept = normal(0,1,autoscale=TRUE),
prior = normal(0,1, autoscale=TRUE),
chains = 4, iter = 5000*2, seed = 84735 )
prior_summary(cancel_model)
mcmc_trace(cancel_model)
mcmc_dens_overlay(cancel_model)
proportion_cancel <- function(x){mean(x == 1)}
pp_check(cancel_model, nreps = 100,
plotfun = "stat", stat = "proportion_cancel") +
xlab("probability of cancel")
tidy(cancel_model, effects = "fixed", conf.int = TRUE, conf.level = 0.80)
exp(posterior_interval(cancel_model,prob=.8))
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.5)
cancel_pred <- posterior_predict(cancel_model)
dim(cancel_pre)
cancel_pred <- posterior_predict(cancel_model)
dim(cancel_pred)
View(cancel_pred)
? colMeans
cancel_classifications <- hotel_bookings %>%
mutate(cancel_prob = colMeans(cancel_pred),
cancel_class = as.numeric(cancel_prob >= 0.5))
View(cancel_classifications)
cancel_classifications <- hotel_bookings %>%
mutate(cancel_prob = colMeans(cancel_pred),
cancel_class = as.numeric(cancel_prob >= 0.5),
match = cancel_class == is_canceled)
View(cancel_classifications)
mean(cancel_classifications$match)
cancel_classifications  %>%
group_by(cancel_class) %>% sum
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer()
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% unstack
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(-n,values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(n,values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(-is_canceled,values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(-is_canceled,names_to =  'count', values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(-is_canceled,names_to =  'count', values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_longer(!is_canceled,names_to =  'count', values_to=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_wider(names_from=is_cancelled,values_from=n)
cancel_classifications  %>%
group_by(cancel_class,is_canceled) %>% count %>% pivot_wider(names_from=is_canceled,values_from=n)
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.5)$confusion_matrix
mean(cancel_classifications$match)
cv_accuracy <- classification_summary_cv(
model = cancel_model, data = hotel_bookings, cutoff = 0.5, k = 10)
cv_accuracy$cv$overall_accuracy
cv_accuracy$cv
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.5)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.2)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.4)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.3)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.34)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.32)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.31)$accuracy_rates
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.3)$accuracy_rates
View(hotel_bookings)
cancel_guest <- posterior_predict(cancel_model, newdata = data.frame(previous_canellations = c(1), is_repeated_guest=c(0), average_daily_rate=c(100), lead_time= c(30)))
cancel_guest <- posterior_predict(cancel_model, newdata = data.frame(previous_cancellations = c(1),
is_repeated_guest=c(0), average_daily_rate=c(100),
lead_time= c(30)))
dim(cancel_pred)
cancel_guest <- posterior_predict(cancel_model, newdata = data.frame(previous_cancellations = c(1),
is_repeated_guest=c(0), average_daily_rate=c(100),
lead_time= c(30)))
dim(cancel_guest)
cancel_guest <- posterior_predict(cancel_model, newdata = data.frame(previous_cancellations = c(1),
is_repeated_guest=c(0), average_daily_rate=c(100),
lead_time= c(30)))
dim(cancel_guest)
mean(cancel_guest)
cv_accuracy <- classification_summary_cv(
model = cancel_model, data = hotel_bookings, cutoff = 0.3, k = 10)
cv_accuracy$cv
customer_model <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*1 + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
customer_mode$prop
customer_model$prop
customer_model$prob
mean(customer_model$prob)
dims(customer_model.Y)
dim(customer_model.Y)
dim(customer_model$Y)
customer_model$Y
mean(customer_model$Y)
# Load packages
library(bayesrules)
library(rstanarm)
library(bayesplot)
library(tidyverse)
library(tidybayes)
library(broom.mixed)
data("hotel_bookings")
hotel_bookings %>%
select(is_canceled)  %>% summarize(fraction_cancelled = mean(is_canceled==1))
hotel_bookings <- hotel_bookings %>%
select(is_canceled,lead_time, previous_cancellations, is_repeated_guest, average_daily_rate )
cancel_model <- stan_glm(is_canceled ~ lead_time + previous_cancellations + is_repeated_guest + average_daily_rate,
data = hotel_bookings, family = binomial,
prior_intercept = normal(0,1,autoscale=TRUE),
prior = normal(0,1, autoscale=TRUE),
chains = 4, iter = 5000*2, seed = 84735 )
tidy(cancel_model, effects = "fixed", conf.int = TRUE, conf.level = 0.80)
View(hotel_bookings)
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*25 + is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*25 + is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
mean(customer_mode2$Y)
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*25 + is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
mean(customer_model2$Y)
classification_summary(model = cancel_model, data= hotel_bookings, cutoff = 0.2)$accuracy_rates
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*25 + is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
mean(customer_model2$Y)
mean(customer_model2$prob)
min(customer_model2$prob)
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*20 + is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
mean(customer_model2$Y)
mean(customer_model2$prob)
customer_model2 <- as.data.frame(cancel_model) %>%
mutate(log_odds = `(Intercept)` + previous_cancellations*10+ is_repeated_guest + average_daily_rate*100 + lead_time*30,
odds = exp(log_odds),
prob = odds / (1 + odds),
Y = rbinom(20000, size = 1, prob = prob))
mean(customer_model2$Y)
mean(customer_model2$prob)
# Load packages
library(bayesrules)
library(tidyverse)
library(rstanarm)
library(broom.mixed)
# Load data
data(cherry_blossom_sample)
running <- cherry_blossom_sample %>%
select(runner, age, net)
nrow(running)
list <- c('Wasson','Bietry', 'Cunningham', 'Hoff', 'Baldwin', 'Godfrey', 'Halle', 'Jackson')
list
sample(list,5)
library(ISLR2)
names(BrainCancer)
set.seed(4)
N <- 2000
Operators <- sample(5:15, N, replace = T)
Center <- sample(c("A", "B", "C"), N, replace = T)
Time <- sample(c("Morn.", "After.", "Even."), N, replace = T)
X <- model.matrix( ~ Operators + Center + Time)[, -1]
X[1:5, ]
true.beta <- c(0.04, -0.3, 0, 0.2, -0.2)
h.fn <- function(x) return(0.00001 * x)
library(coxed)
queuing <- sim.survdata(N = N, T = 1000, X = X,
beta = true.beta, hazard.fun = h.fn)
names(queuing)
head(queuing$data)
mean(queuing$data$failed)
View(queing$data)
View(queuing$data)
? sim.survdata
fit.Center <- survfit(Surv(y, failed) ~ Center,
data = queuing$data)
plot(fit.Center, xlab = "Seconds",
ylab = "Probability of Still Being on Hold",
col = c(2, 4, 5))
legend("topright",
c("Call Center A", "Call Center B", "Call Center C"),
col = c(2, 4, 5), lty = 1)
fit.Time <- survfit(Surv(y, failed) ~ Time,
data = queuing$data)
plot(fit.Time, xlab = "Seconds",
ylab = "Probability of Still Being on Hold",
col = c(2, 4, 5))
legend("topright", c("Morning", "Afternoon", "Evening"),
col = c(5, 2, 4), lty = 1)
survdiff(Surv(y, failed) ~ Center, data = queuing$data)
survdiff(Surv(y, failed) ~ Time, data = queuing$data)
fit.queuing <- coxph(Surv(y, failed) ~ .,
data = queuing$data)
fit.queuing
180*1.51
180*1.51/1.08
180*1.51*1.08
180*1.51
380*2.32/1.25
180*1.51/1.08
180*1.51/1.08*(1-0.0019)
180*(1+.51/.08)*(1-0.0019)
180*(1.51/.08)*(1-0.0019)
180*(1.51/.8)*(1-0.0019)
180*(1.51/1.8)*(1-0.0019)
180*(1.51/1.08)*(1-0.0019)
180*(1.51/1.08)*(1-0.0019)
180*(1.51/1.0)*(1-0.25)
260*2.32/1.25*(1-.0156)
360*2.32/1.25*(1-.0156)
360*2.32/1*(1-.0156)
360*(1+.32-.25)/1*(1-.0156)
360*(1+.32/.25)/1*(1-.0156)
360*(1+.32)/1*(1-.0156)
360*(1+1.32/.25)/1*(1-.0156)
360*(1+1.32)/.25*(1-.0156)
360*(1+1.32)/(1-.25)*(1-.0156)
360*(1+1.32)/(1+.25)*(1-.0156)
360*(1+1.32)*(1-.0156)
360*(1+1.32)*(1+.25)*(1-.0156)
exp(1.32)
exp(.24)
360*exp(1.32/.25)
360*exp(1.32-.25)
1+.1
exp(.1)
exp(.25)
exp(-.25)
wEff <- 360*2.32*(1-.0156)
wEff
832/wEff
wEff/832
360*2.32/.75*(1-0.0156)
360*2.32/(1+.25)*(1-0.0156)
360*2.32/(1+.025)*(1-0.0156)
360*2.32/(1+.0025)*(1-0.0156)
360*2.32/(1+.00025)*(1-0.0156)
360*2.32/(1-.00025)*(1-0.0156)
360*2.32/(1-.0025)*(1-0.0156)
360*2.32/(1-.025)*(1-0.0156)
360*2.32/(1-.25)*(1-0.0156)
360*2.32/(1-.25)*(1-0.0156)/2
library(lobstr)
packages.install(lobster)
package.install(lobster)
install.packages(lobster)
install.packages(lobstr)
install.packages('lobstr')
setwd("~/dataSciDev/AdvancedR/AdvRWork")
library(lobstr)
obj_addr(mean)
obj_addr(base::mean)
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get("mean"))
obj_addr(match.fun("mean"))
? read.csv
make.names('_truck')
make.names(_truck)
make.names('_truck','X_truck')
make.names(c('_truck','X_truck'))
make.names(c('3bear'))
?make.names
make.names(c('_truck','X_truck'),unique = TRUE)
make.names('if')
.123e1 <- 3
.123
.123 <- 3
make.name('.123e1')
make.names('.123e1')
.e = 4
x <- c(1,2,3)
cat(tracemem(x),"\n")
? cat
y <- x
y[3] <- 4L
y[3]
y[[3]]
y[3] <- 2l
y[3] <- 2
y[3] <- 2
y[3] <- 2
y[3] <- 2
l1 <- list(1,2,3)
l2 <- l1
ref(l1,l2)
l2[3]
l2[[3]] <- 43
ref(l1,l2)
d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))
ref(d1)
d1 <- d1
d2 <- d1
d2[,2] <- d2[,2] *3
d2
d1
ref(d1,d2)
char <- c("a","b","c")
char
typeof(char)
ref(char)
ref(char, character = TRUE)
tracemem(1:10)
x <- c(1L,2L,3L)
typeof(4)
tracemem(x)
x[[3]] <- 4
x
typeof(x)
a <- 1:10
b <- list(a,a)
c <- list(b,a, 1:10)
ref(a,b,c)
x <- list(1:10)
obj_addr(x)
x[[2]] <- x
ref(x)
x <- list(1:10)
cat(obj_addr(x),"\n")
x[[2]] <- x
ref(x)
obj_addr(x)
x <- list(1:10)
cat("original x:",obj_addr(x),"\n\n")
x[[2]] <- x
ref(x)
x
y<- rep(list(runif(1e4)),100)
ref(y)
y<- rep(list(runif(1e4)),100)
typeof(y)
class(y)
?rep
obj_size(runif(1e4))
? object.size
obj_size(mean)
obj_size(var)
obj_size(sd)
var
object.size
object_size.list
object.size.list
methods(object.size)
a <- runif(1e6)
obj_size(a)
typeof(a)
a <- runif(1e6)
b <- list(a,a)
obj_size(a)
obj_size(b)
b[[1]][[1]] <- 10
obj_size(b)
obj_size(a,b)
b[[2]][[1]] <- 10
obj_size(b)
obj_size(a,b)
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))
for (i in seq_along(medians)) {
x[[i]] <- x[[i]] - medians[[i]]
}
cat(tracemem(x), "\n")
for (i in 1:5) {
x[[i]] <- x[[i]] - medians[[i]]
}
untracemem(x)
y <- as.list(x)
cat(tracemem(y), "\n")
#> <0x7f80c5c3de20>
for (i in 1:5) {
y[[i]] <- y[[i]] - medians[[i]]
}
#> tracemem[0x7f80c5c3de20 -> 0x7f80c48de210]:
a<- 33
test <- function() {
print(a)
}
test()
a<-334
test()
e1 <- rlang::env(a = 1, b = 2, c = 3)
e2 <- e1
e1 <- rlang::env(a = 1, b = 2, c = 3)
e2 <- e1
e1$c <- 4
e2$c
ref(e1)
e <- rlang::env()
tracemem(e)
e <- rlang::env()
tracemem(e)
